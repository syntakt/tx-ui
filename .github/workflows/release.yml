name: Release TX-UI

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        platform:
          - amd64
#          - arm64
#          - armv7
#          - armv6
#          - 386
#         - armv5
#          - s390x
#          - windows-amd64   # Added Windows support
    runs-on: ${{ matrix.platform == 'windows-amd64' && 'windows-latest' || 'ubuntu-22.04' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Install dependencies
        if: matrix.platform != 'windows-amd64'
        run: |
          sudo apt-get update
          if [ "${{ matrix.platform }}" == "arm64" ]; then
            sudo apt install gcc-aarch64-linux-gnu
          elif [ "${{ matrix.platform }}" == "armv7" ]; then
            sudo apt install gcc-arm-linux-gnueabihf
          elif [ "${{ matrix.platform }}" == "armv6" ]; then
            sudo apt install gcc-arm-linux-gnueabihf
          elif [ "${{ matrix.platform }}" == "386" ]; then
            sudo apt install gcc-i686-linux-gnu
          elif [ "${{ matrix.platform }}" == "armv5" ]; then
            sudo apt install gcc-arm-linux-gnueabi
          elif [ "${{ matrix.platform }}" == "s390x" ]; then
            sudo apt install gcc-s390x-linux-gnu
          fi

      - name: Build x-ui (Linux)
        if: matrix.platform != 'windows-amd64'
        run: |
          export CGO_ENABLED=1
          export GOOS=linux
          export GOARCH=${{ matrix.platform }}
          if [ "${{ matrix.platform }}" == "arm64" ]; then
            export GOARCH=arm64
            export CC=aarch64-linux-gnu-gcc
          elif [ "${{ matrix.platform }}" == "armv7" ]; then
            export GOARCH=arm
            export GOARM=7
            export CC=arm-linux-gnueabihf-gcc
          elif [ "${{ matrix.platform }}" == "armv6" ]; then
            export GOARCH=arm
            export GOARM=6
            export CC=arm-linux-gnueabihf-gcc
          elif [ "${{ matrix.platform }}" == "386" ]; then
            export GOARCH=386
            export CC=i686-linux-gnu-gcc
          elif [ "${{ matrix.platform }}" == "armv5" ]; then
            export GOARCH=arm
            export GOARM=5
            export CC=arm-linux-gnueabi-gcc
          elif [ "${{ matrix.platform }}" == "s390x" ]; then
            export GOARCH=s390x
            export CC=s390x-linux-gnu-gcc
          fi
          go build -ldflags "-w -s" -o xui-release -v main.go
          
          mkdir x-ui
          cp xui-release x-ui/
          cp x-ui.service x-ui/
          cp x-ui.sh x-ui/
          mv x-ui/xui-release x-ui/x-ui
          mkdir x-ui/bin
          cd x-ui/bin
          
          # Download dependencies
          Xray_URL="https://github.com/XTLS/Xray-core/releases/download/v25.6.8/"
          if [ "${{ matrix.platform }}" == "amd64" ]; then
            wget -q ${Xray_URL}Xray-linux-64.zip
            unzip Xray-linux-64.zip
            rm -f Xray-linux-64.zip
          elif [ "${{ matrix.platform }}" == "arm64" ]; then
            wget -q ${Xray_URL}Xray-linux-arm64-v8a.zip
            unzip Xray-linux-arm64-v8a.zip
            rm -f Xray-linux-arm64-v8a.zip
          elif [ "${{ matrix.platform }}" == "armv7" ]; then
            wget -q ${Xray_URL}Xray-linux-arm32-v7a.zip
            unzip Xray-linux-arm32-v7a.zip
            rm -f Xray-linux-arm32-v7a.zip
          elif [ "${{ matrix.platform }}" == "armv6" ]; then
            wget -q ${Xray_URL}Xray-linux-arm32-v6.zip
            unzip Xray-linux-arm32-v6.zip
            rm -f Xray-linux-arm32-v6.zip
          elif [ "${{ matrix.platform }}" == "386" ]; then
            wget -q ${Xray_URL}Xray-linux-32.zip
            unzip Xray-linux-32.zip
            rm -f Xray-linux-32.zip
          elif [ "${{ matrix.platform }}" == "armv5" ]; then
            wget -q ${Xray_URL}Xray-linux-arm32-v5.zip
            unzip Xray-linux-arm32-v5.zip
            rm -f Xray-linux-arm32-v5.zip
          elif [ "${{ matrix.platform }}" == "s390x" ]; then
            wget -q ${Xray_URL}Xray-linux-s390x.zip
            unzip Xray-linux-s390x.zip
            rm -f Xray-linux-s390x.zip
          fi
          rm -f geoip.dat geosite.dat
          wget -q https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat
          wget -q https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat
          wget -q -O geoip_IR.dat https://github.com/chocolate4u/Iran-v2ray-rules/releases/latest/download/geoip.dat
          wget -q -O geosite_IR.dat https://github.com/chocolate4u/Iran-v2ray-rules/releases/latest/download/geosite.dat
          wget -q -O geoip_RU.dat https://github.com/runetfreedom/russia-v2ray-rules-dat/releases/latest/download/geoip.dat
          wget -q -O geosite_RU.dat https://github.com/runetfreedom/russia-v2ray-rules-dat/releases/latest/download/geosite.dat
          mv xray xray-linux-${{ matrix.platform }}
          cd ../..

      - name: Build x-ui (Windows)
        if: matrix.platform == 'windows-amd64'
        shell: pwsh
        run: |
          $env:CGO_ENABLED="1"
          $env:GOOS="windows"
          $env:GOARCH="amd64"
          go build -ldflags "-w -s" -o xui-release.exe -v main.go
          
          mkdir x-ui
          Copy-Item xui-release.exe x-ui\
          # Windows-specific files (if any) can be copied here
          mkdir x-ui\bin
          cd x-ui\bin
          
          # Download Xray for Windows
          $Xray_URL = "https://github.com/XTLS/Xray-core/releases/download/v25.6.8/"
          Invoke-WebRequest -Uri "${Xray_URL}Xray-windows-64.zip" -OutFile "Xray-windows-64.zip"
          Expand-Archive -Path "Xray-windows-64.zip" -DestinationPath .
          Remove-Item "Xray-windows-64.zip"
          Remove-Item geoip.dat, geosite.dat -ErrorAction SilentlyContinue
          Invoke-WebRequest -Uri "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geoip.dat" -OutFile "geoip.dat"
          Invoke-WebRequest -Uri "https://github.com/Loyalsoldier/v2ray-rules-dat/releases/latest/download/geosite.dat" -OutFile "geosite.dat"
          Invoke-WebRequest -Uri "https://github.com/chocolate4u/Iran-v2ray-rules/releases/latest/download/geoip.dat" -OutFile "geoip_IR.dat"
          Invoke-WebRequest -Uri "https://github.com/chocolate4u/Iran-v2ray-rules/releases/latest/download/geosite.dat" -OutFile "geosite_IR.dat"
          Invoke-WebRequest -Uri "https://github.com/runetfreedom/russia-v2ray-rules-dat/releases/latest/download/geoip.dat" -OutFile "geoip_RU.dat"
          Invoke-WebRequest -Uri "https://github.com/runetfreedom/russia-v2ray-rules-dat/releases/latest/download/geosite.dat" -OutFile "geosite_RU.dat"
          Rename-Item xray.exe xray-windows-amd64.exe
          cd ../..

      - name: Package (Windows)
        if: matrix.platform == 'windows-amd64'
        shell: pwsh
        run: |
          Compress-Archive -Path x-ui -DestinationPath x-ui-windows-amd64.zip

      - name: Package (Linux)
        if: matrix.platform != 'windows-amd64'
        run: |
          tar -zcvf x-ui-linux-${{ matrix.platform }}.tar.gz x-ui

      - name: Upload files to Artifacts (Windows)
        if: matrix.platform == 'windows-amd64'
        uses: actions/upload-artifact@v4
        with:
          name: x-ui-windows-amd64
          path: ./x-ui-windows-amd64.zip

      - name: Upload files to Artifacts (Linux)
        if: matrix.platform != 'windows-amd64'
        uses: actions/upload-artifact@v4
        with:
          name: x-ui-${{ matrix.platform }}
          path: ./x-ui-linux-${{ matrix.platform }}.tar.gz

      - name: Upload files to GH release (Windows)
        if: matrix.platform == 'windows-amd64'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: x-ui-windows-amd64.zip
          asset_name: x-ui-windows-amd64.zip
          prerelease: true

      - name: Upload files to GH release (Linux)
        if: matrix.platform != 'windows-amd64'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          file: x-ui-linux-${{ matrix.platform }}.tar.gz
          asset_name: x-ui-linux-${{ matrix.platform }}.tar.gz
          prerelease: true
